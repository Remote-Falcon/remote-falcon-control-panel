---
apiVersion: v1
kind: Namespace
metadata:
  name: #{Namespace}#
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #{Application}#
  namespace: #{Namespace}#
  labels:
    app: #{Application}#
    tags.datadoghq.com/env: #{Env}#
    tags.datadoghq.com/service: #{Application}#
    tags.datadoghq.com/version: #{Version}#
spec:
  replicas: #{Replicas}#
  selector:
    matchLabels:
      app: #{Application}#
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      annotations:
        com.datadoghq.ad.logs: '[{"source": "java", "service": "remote-falcon-control-panel", "log_processing_rules": [{"type": "multi_line", "name": "log_start_with_date", "pattern" : "\\d{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])"}]}]'
      labels:
        app: #{Application}#
        tags.datadoghq.com/env: #{Env}#
        tags.datadoghq.com/service: #{Application}#
        tags.datadoghq.com/version: #{Version}#
    spec:
      volumes:
        - hostPath:
            path: /var/run/datadog/
          name: apmsocketpath
      containers:
      - name: #{Application}#
        image: #{Image}#
        resources:
          requests:
            memory: #{Requests.Memory}#
            cpu: #{Requests.CPU}#
          limits:
            memory: #{Limits.Memory}#
            cpu: #{Limits.CPU}#
        volumeMounts:
          - name: apmsocketpath
            mountPath: /var/run/datadog
        ports:
        - containerPort: 8080
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: #{Env}#
        - name: auto-validate-email
          value: "false"
        - name: spring.datasource.username
          valueFrom:
            secretKeyRef:
              name: remote-falcon-control-panel
              key: mysql-user
        - name: spring.datasource.password
          valueFrom:
            secretKeyRef:
              name: remote-falcon-control-panel
              key: mysql-pass
        - name: spring.data.mongodb.uri
          valueFrom:
            secretKeyRef:
              name: remote-falcon-control-panel
              key: mongo-uri
        - name: github.pat
          valueFrom:
            secretKeyRef:
              name: remote-falcon-control-panel
              key: github-pat
        - name: sendgrid.key
          valueFrom:
            secretKeyRef:
              name: remote-falcon-control-panel
              key: sendgrid-key
        - name: jwt.user
          valueFrom:
            secretKeyRef:
              name: remote-falcon-control-panel
              key: jwt-user
        - name: DD_ENV
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/env']
        - name: DD_SERVICE
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/service']
        - name: DD_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/version']
        - name: DD_LOGS_INJECTION
          value: "true"
        startupProbe:
          httpGet:
            path: /remote-falcon-control-panel/actuator/health
            port: 8080
          failureThreshold: 60
        livenessProbe:
          httpGet:
            path: /remote-falcon-control-panel/actuator/health
            port: 8080
          initialDelaySeconds: 0
          timeoutSeconds: 10
          failureThreshold: 60
        readinessProbe:
          httpGet:
            path: /remote-falcon-control-panel/actuator/health
            port: 8080
          failureThreshold: 60
          initialDelaySeconds: 0
      imagePullSecrets:
        - name: remote-falcon-ghcr
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: #{Application}#
  namespace: #{Namespace}#
spec:
  selector:
    matchLabels:
      app: #{Application}#
  endpoints:
    - port: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: #{Application}#
  namespace: #{Namespace}#
spec:
  type: ClusterIP
  ports:
  - port: 8080
  selector:
    app: #{Application}#
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: #{Application}#
  namespace: #{Namespace}#
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  - host: #{Host}#
    http:
      paths:
      - pathType: Prefix
        path: /remote-falcon-control-panel
        backend:
          service:
            name: #{Application}#
            port:
              number: 8080
