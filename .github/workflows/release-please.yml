name: Release Please
on:
  push:
    branches:
      - 'main'
      - 'releases/**'

permissions:
  contents: write
  pull-requests: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release-please:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: google-github-actions/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: simple
          target-branch: ${{ github.ref_name }}
      - name: Echo Release Please tag_name
        run: |
          echo ${{ steps.release.outputs.tag_name }}
      - name: Echo Release Please releases_created
        run: |
          echo ${{ steps.release.outputs.releases_created }}
  build-and-push:
    name: Build image
    runs-on: ubuntu-latest
    needs: release-please
    if: ${{ needs.release-please.outputs.releases_created == true }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
      - name: Echo Release Please tag_name
        run: |
          echo ${{ needs.release-please.outputs.tag_name }}
      - name: Echo Meta tags
        run: |
          echo ${{ steps.meta.outputs.tags }}
      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ needs.release-please.outputs.tag_name }}
          labels: ${{ steps.meta.outputs.labels }}
  release-test:
    name: Release Test
    environment: test
    needs: [release-please, build-and-push]
    runs-on: ubuntu-latest
    if: ${{ needs.release-please.outputs.releases_created == true }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: cschleiden/replace-tokens@v1
        name: Replace tokens in manifest
        with:
          files: './k8s/manifest.yml'
        env:
          Namespace: remote-falcon-test
          Application: remote-falcon-control-panel
          Env: test
          Replicas: 1
          Image: ${{ needs.build.outputs.meta-tag }}
          Requests.Memory: 500Mi
          Requests.CPU: 250m
          Limits.Memory: 750Mi
          Limits.CPU: 500m
          Host: remotefalcon.dev

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 4fee5fb4-939b-4d7a-8eb0-1b31115a74dc

      - name: Kubectl apply
        run: kubectl apply -f ./k8s/manifest.yml
  release-production:
    name: Release Production
    environment: production
    needs: [release-please, build-and-push, release-test]
    runs-on: ubuntu-latest
    if: ${{ needs.release-please.outputs.releases_created == true && github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: cschleiden/replace-tokens@v1
        name: Replace tokens in manifest
        with:
          files: './k8s/manifest.yml'
        env:
          Namespace: remote-falcon
          Application: remote-falcon-control-panel
          Env: production
          Replicas: 2
          Image: ${{ needs.build.outputs.meta-tag }}
          Requests.Memory: 1000Mi
          Requests.CPU: 500m
          Limits.Memory: 1250Mi
          Limits.CPU: 750m
          Host: remotefalcon.com

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 4fee5fb4-939b-4d7a-8eb0-1b31115a74dc

      - name: Kubectl apply
        run: kubectl apply -f ./k8s/manifest.yml
